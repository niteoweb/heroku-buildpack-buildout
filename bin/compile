#!/usr/bin/env bash

set -eo pipefail

# Heroku has opinions on indentation, let's respect them
indent() {
  sed -u 's/^/       /'
}

BUILD_DIR=$1  # -> temp dir that contains whatever is in the git repo
CACHE_DIR=$2  # -> use this dir for caching between compiles
ENV_DIR=$3  # -> environment variables are stored as files inside here
# where Python will be located when this slug is in heroku runtime
# default to /app if not set
APP_DIR=${4:-/app}

# Export env vars from ENV_DIR to environment, so it's easier to access them
# Taken from https://devcenter.heroku.com/articles/buildpack-api
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
export_env_dir "$ENV_DIR"

# make sure dirs exist
mkdir -p $CACHE_DIR

if [ ! -f "$BUILD_DIR/.heroku/python/bin/python" ]; then
    echo "-----> This buildpack depends on heroku-buildpack-python."
    echo "You need to run heroku-buildpack-python before heroku-buildpack-buildout" | indent
    exit 1
fi

echo "-----> Use build cache"
if [ -d $CACHE_DIR/bin ]; then
    echo "Get buildout results from the previous build" | indent
    cp -r $CACHE_DIR/bin  $BUILD_DIR/
    cp -r $CACHE_DIR/eggs  $BUILD_DIR/
    cp -r $CACHE_DIR/parts  $BUILD_DIR/
    if [ -d $BUILD_DIR/var ]; then
        cp -r $CACHE_DIR/var  $BUILD_DIR/
    fi
else
    echo "Cache empty, start from scratch" | indent
fi

echo "-----> Read BUILDOUT_CFG from env vars, or use default"
if [ -f $ENV_DIR/BUILDOUT_CFG ]; then
    export "BUILDOUT_CFG=$(cat $ENV_DIR/BUILDOUT_CFG)"
    echo "Found ${BUILDOUT_CFG}" | indent
else
    export "BUILDOUT_CFG=buildout.cfg"
    echo "Use default buildout.cfg" | indent
fi

echo "-----> Read BUILDOUT_VERBOSITY from env vars, or use default"
if [ -f $ENV_DIR/BUILDOUT_VERBOSITY ]; then
    # simple trimming
    TRIMMED_BUILDOUT_VERBOSITY=$(cat $ENV_DIR/BUILDOUT_VERBOSITY | xargs)
    if [[ $TRIMMED_BUILDOUT_VERBOSITY =~ ^\-v+$ ]]; then
        export "BUILDOUT_VERBOSITY=$TRIMMED_BUILDOUT_VERBOSITY"
        echo "Use buildout verbosity: ${BUILDOUT_VERBOSITY}" | indent
    else
        echo "You need to set BUILDOUT_VERBOSITY to -v, -vv, -vvv, etc." | indent
        exit 1
    fi
else
    export "BUILDOUT_VERBOSITY="
    echo "Use default buildout verbosity" | indent
fi

# create a symlink to where Python will be located when this slug is in
# heroku runtime, so paths in bin/ scripts generated by buildout are correct
mkdir -p $APP_DIR/.heroku/
ln -s $BUILD_DIR/.heroku/python $APP_DIR/.heroku/python

# configure environment to use Python compiled by heroku-buildpack-python
export PATH=$BUILD_DIR/.heroku/python/bin:$BUILD_DIR/.heroku/vendor/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export C_INCLUDE_PATH=$APP_DIR/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include:$APP_DIR/.heroku/python/include
export CPLUS_INCLUDE_PATH=$APP_DIR/.heroku/vendor/include:$BUILD_DIR/.heroku/vendor/include:$APP_DIR/.heroku/python/include
export LIBRARY_PATH=$APP_DIR/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib:$APP_DIR/.heroku/python/lib:$BUILD_DIR/.heroku/python/lib
export LD_LIBRARY_PATH=$APP_DIR/.heroku/vendor/lib:$BUILD_DIR/.heroku/vendor/lib:$APP_DIR/.heroku/python/lib:$BUILD_DIR/.heroku/python/lib
export PKG_CONFIG_PATH=$APP_DIR/.heroku/vendor/lib/pkg-config:$BUILD_DIR/.heroku/vendor/lib/pkg-config:$APP_DIR/.heroku/python/lib/pkg-config

cd $BUILD_DIR
mkdir -p eggs  # zc.buildout expects this folder to exist

echo "-----> Run buildout -c ${BUILDOUT_CFG} ${BUILDOUT_VERBOSITY}"
$APP_DIR/.heroku/python/bin/buildout -c $BUILDOUT_CFG $BUILDOUT_VERBOSITY

echo "-----> Copy results to cache"
rm -rf $CACHE_DIR/bin
rm -rf $CACHE_DIR/eggs
rm -rf $CACHE_DIR/parts
rm -rf $CACHE_DIR/var

cp -r $BUILD_DIR/bin $CACHE_DIR
cp -r $BUILD_DIR/eggs $CACHE_DIR
cp -r $BUILD_DIR/parts $CACHE_DIR
if [ -d $BUILD_DIR/var ]; then
    cp -r $BUILD_DIR/var $CACHE_DIR
fi

echo "Done" | indent
